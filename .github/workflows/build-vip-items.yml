name: Build VIP Module

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-22.04

    env:
      HL2SDK_ROOT: "${{ github.workspace }}/external"
      MMS_PATH: "${{ github.workspace }}/external/metamod-source"
      MANIFEST_PATH: "${{ github.workspace }}/external/metamod-source/hl2sdk-manifests"
      SCHEMA_PATH: "${{ github.workspace }}/external/SchemaEntity"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo dpkg --add-architecture i386
          sudo apt-get update -qy
          sudo apt-get install -y git clang binutils python3 zip \
            gcc-multilib g++-multilib libc6-dev-i386 linux-libc-dev:i386
          python3 -m pip install --upgrade pip importlib-metadata
          python3 -m pip install setuptools==45.2.0
          
          # Install AMBuild
          git clone https://github.com/alliedmodders/ambuild.git
          cd ambuild
          pip install .
          cd ..
          
          # Setup external dependencies
          mkdir -p external
          cd external
          
          # Clone required repositories with specific branches
          git clone --recursive https://github.com/alliedmodders/metamod-source.git
          cd metamod-source
          git checkout master
          cd ..
          
          git clone --recursive https://github.com/alliedmodders/sourcemod.git
          cd sourcemod
          git checkout master
          cd ..
          
          # Clone CS2 SDK with specific branch
          git clone --recursive https://github.com/alliedmodders/hl2sdk.git hl2sdk-cs2
          cd hl2sdk-cs2
          git checkout cs2
          cd ..
          
          # Clone hl2sdk-manifests
          git clone https://github.com/alliedmodders/hl2sdk-manifests.git
          
          # Clone SchemaEntity
          git clone https://github.com/Pisex/SchemaEntity.git
          cd ..

      - name: Setup Schema Files
        run: |
          # First, let's verify the schema files exist
          echo "Checking SchemaEntity files..."
          ls -la external/SchemaEntity/
          
          # Create the correct directory structure
          mkdir -p VIP_Items/src/sdk
          
          # Copy schema files to the correct location
          echo "Copying SchemaEntity files..."
          cp -rv external/SchemaEntity/*.h VIP_Items/src/sdk/
          cp -rv external/SchemaEntity/*.cpp VIP_Items/src/sdk/
          
          # Verify the copy
          echo "Verifying copied files..."
          ls -la VIP_Items/src/sdk/
          
          # Create symlinks for vstdlib if needed
          if [ ! -d "${HL2SDK_ROOT}/hl2sdk-cs2/public/vstdlib" ]; then
            echo "Creating vstdlib directory..."
            mkdir -p "${HL2SDK_ROOT}/hl2sdk-cs2/public/vstdlib"
          fi

      - name: Build VIP_Items
        run: |
          cd VIP_Items
          # Clean up any existing build artifacts
          rm -f VIP_Items.zip
          rm -f build/VIP_Items.zip
          rm -rf build/*
          
          mkdir -p build
          cd src
          
          # Add include path for schema files
          echo "Adding schema files to include path..."
          export CXXFLAGS="$CXXFLAGS -I./sdk"
          
          mkdir -p build
          cd build
          
          # Show directory structure before configure
          echo "Directory structure before configure:"
          ls -R ../
          
          # Configure with specific paths and include directories
          python3 ../configure.py \
            --enable-optimize \
            --symbol-files \
            --sdks cs2 \
            --hl2sdk-root=$HL2SDK_ROOT \
            --mms_path=$MMS_PATH \
            --hl2sdk-manifests=$MANIFEST_PATH
          
          # Show directory structure before building
          echo "Directory structure before build:"
          ls -R
          
          ambuild

          # Verify required files and structure before zipping
          echo "Checking build output structure..."
          if [ -d "package/addons" ]; then
            # Check for .vdf file
            if [ ! -f "package/addons/metamod/vip_items.vdf" ]; then
              echo "Error: vip_items.vdf is missing"
              echo "Contents of package/addons/metamod/:"
              ls -la package/addons/metamod/
              exit 1
            fi
            
            # Check for .so file
            if [ ! -f "package/addons/vip_modules/vip_items.so" ]; then
              echo "Error: vip_items.so is missing"
              echo "Contents of package/addons/vip_modules/:"
              ls -la package/addons/vip_modules/
              exit 1
            fi
            
            # Check for config file
            if [ ! -f "package/addons/configs/vip/vip_items.ini" ]; then
              echo "Error: vip_items.ini is missing"
              echo "Contents of package/addons/configs/vip/:"
              ls -la package/addons/configs/vip/
              exit 1
            fi
            
            echo "All required files present, creating zip..."
            
            # Show final directory structure
            echo "Final directory structure:"
            ls -R package/addons/
            
            # If all files exist, create the zip
            cd package/addons
            rm -f ../../../VIP_Items.zip
            zip -r ../../../VIP_Items.zip .
            echo "Zip file created successfully"
          else
            echo "Error: build directory structure is incorrect"
            echo "Current directory structure:"
            ls -R
            exit 1
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: VIP_Items
          path: VIP_Items/VIP_Items.zip

      - name: Upload release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: VIP_Items/VIP_Items.zip
